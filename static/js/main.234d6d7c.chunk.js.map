{"version":3,"sources":["Nav.js","About.js","Projects.js","Experience.js","serviceWorker.js","index.js","App.js"],"names":["Nav","className","to","style","padding","href","target","src","height","width","Component","About","class","Projects","Experience","Boolean","window","location","hostname","match","ReactDOM","render","useLocation","transitions","useTransition","pathname","from","opacity","transform","enter","leave","map","item","props","key","div","exact","path","component","document","getElementById"],"mappings":"kSAuDeA,E,iLA3CX,OACE,yBAAKC,UAAU,iBACb,yBAAKA,UAAU,YACb,wBAAIA,UAAU,QAAd,iBAKF,wBAAIA,UAAU,aACZ,kBAAC,IAAD,CAASA,UAAU,YAAYC,GAAG,UAChC,wBAAIC,MAAO,CAAEC,QAAS,QAAtB,aAEF,kBAAC,IAAD,CAASH,UAAU,YAAYC,GAAG,aAChC,wBAAIC,MAAO,CAAEC,QAAS,QAAtB,aAEF,kBAAC,IAAD,CAASH,UAAU,YAAYC,GAAG,eAChC,wBAAIC,MAAO,CAAEC,QAAS,QAAtB,gBAGJ,yBAAKH,UAAU,WAEf,uBAAGI,KAAK,yDAAyDC,OAAO,UACvE,yBAAKC,IAAI,oCAAoCJ,MAAO,CAACK,OAAQ,MAAOC,MAAO,WAG9E,uBAAGJ,KAAK,+BAA+BC,OAAO,UAC3C,yBAAKC,IAAI,oCAAoCJ,MAAO,CAACK,OAAQ,MAAOC,MAAO,WAG9E,uBAAGJ,KAAK,sCAAsCC,OAAO,UAClD,yBAAKC,IAAI,gCAAgCJ,MAAO,CAACK,OAAQ,MAAOC,MAAO,iB,GAhC9DC,aCSHC,E,iLAVX,OAEE,yBAAKC,MAAM,sBACT,wBAAIA,MAAM,gBAAV,oB,GALYF,aCWLG,E,iLAXX,OAEE,yBAAKD,MAAM,yBACT,wBAAIA,MAAM,gBAAV,uB,GALeF,aCaRI,E,iLAXX,OAEI,yBAAKF,MAAM,2BACX,wBAAIA,MAAM,gBAAV,yB,GALiBF,a,gBCOLK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OACL,kBAAC,IAAD,KACA,mBCAW,WACb,IAAMJ,EAAWK,cACXC,EAAcC,YAAcP,GAAU,SAAAA,GAAQ,OAAIA,EAASQ,WAAU,CAEzEC,KAAM,CAAEC,QAAS,EAAGC,UAAW,yBAC/BC,MAAO,CAAEF,QAAS,EAAGC,UAAW,uBAChCE,MAAO,CAAEH,QAAS,EAAGC,UAAW,2BAIlC,OAEE,yBAAK3B,UAAU,aAChB,kBAAC,EAAD,MACD,yBAAKA,UAAU,WACdsB,EAAYQ,KAAI,gBAASd,EAAT,EAAGe,KAAgBC,EAAnB,EAAmBA,MAAOC,EAA1B,EAA0BA,IAA1B,OACf,kBAAC,IAASC,IAAV,CAAcD,IAAKA,EAAK/B,MAAO8B,EAAOhC,UAAU,gBAC9C,kBAAC,IAAD,CAAQgB,SAAUA,GAChB,kBAAC,IAAD,CAAOmB,OAAK,EAACC,KAAK,IAAKC,UAAW3B,IAChC,kBAAC,IAAD,CAAOyB,OAAK,EAACC,KAAK,SAASC,UAAW3B,IACtC,kBAAC,IAAD,CAAOyB,OAAK,EAACC,KAAK,YAAYC,UAAWzB,IACzC,kBAAC,IAAD,CAAOuB,OAAK,EAACC,KAAK,cAAcC,UAAWxB,aDrBjD,OAEFyB,SAASC,eAAe,W","file":"static/js/main.234d6d7c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport \"./App.css\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  NavLink\n} from \"react-router-dom\";\n\nclass Nav extends Component {\n  render() {\n    return (\n      <div className=\"nav-container\">\n        <div className=\"nav-name\">\n          <h1 className=\"name\"> ALEX VIRGA </h1>\n\n        </div>\n\n\n        <ul className=\"nav-links\">\n          <NavLink className=\"nav-style\" to=\"/about\">\n            <li style={{ padding: \"5px\" }}>About Me</li>\n          </NavLink>\n          <NavLink className=\"nav-style\" to=\"/projects\">\n            <li style={{ padding: \"5px\" }}>Projects</li>\n          </NavLink>\n          <NavLink className=\"nav-style\" to=\"/experience\">\n            <li style={{ padding: \"5px\" }}>Experience</li>\n          </NavLink>\n        </ul>\n        <div className=\"socials\">\n\n        <a href=\"https://www.linkedin.com/in/alexander-virga-285174116/\" target=\"_blank\">\n         <img src=\"iconfinder_11-linkedin_104493.png\" style={{height: \"3vh\", width: \"3vw%\"}}/>\n      </a>\n\n      <a href=\"https://github.com/alexvirga\" target=\"_blank\">\n         <img src=\"iconfinder_mark-github_298822.png\" style={{height: \"3vh\", width: \"3vw%\"}}/>\n      </a>\n\n      <a href=\"https://medium.com/@alexander.virga\" target=\"_blank\">\n         <img src=\"icons8-medium-monogram-50.png\" style={{height: \"3vh\", width: \"3vw%\"}}/>\n      </a>\n\n\n\n        </div>\n\n      </div>\n      \n    );\n  }\n}\n\nexport default Nav;\n","import React, {Component} from 'react';\n\nimport './App.css';\nimport AbsoluteWrapper from './AbsoluteWrapper'\n\n\n\nclass About extends Component {\n  render() {\n    return (\n        \n      <div class=\"content-page-about\">\n        <h1 class=\"page-content\"> About Page</h1>\n      </div>\n  \n    )\n  }\n}\n\nexport default About","import React, {Component} from 'react';\n\nimport './App.css';\nimport AbsoluteWrapper from './AbsoluteWrapper'\n\nclass Projects extends Component {\n  render() {\n    return (\n  \n      <div class=\"content-page-projects\">\n        <h1 class=\"page-content\"> Projects Page</h1>\n      </div>\n\n     \n    )\n  }\n}\n\nexport default Projects","import React, {Component} from 'react';\n\nimport './App.css';\nimport AbsoluteWrapper from './AbsoluteWrapper';\n\nclass Experience extends Component {\n  render() {\n    return (\n    \n        <div class=\"content-page-experience\">\n        <h1 class=\"page-content\"> Experience Page</h1>\n      </div>\n\n     \n    )\n  }\n}\n\nexport default Experience","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport Nav from './Nav'\n\nReactDOM.render(\n    <BrowserRouter>\n    <App />\n    </BrowserRouter>\n, document.getElementById('root'));\n\n\n","import React, { useContext } from \"react\";\n\nimport \"./App.css\";\nimport Nav from \"./Nav\";\nimport About from \"./About\";\nimport Projects from \"./Projects\";\nimport Experience from \"./Experience\";\nimport {useTransition, animated, interpolate, useSpring} from 'react-spring';\n\nimport { Route, Switch, __RouterContext, useLocation } from \"react-router-dom\";\n\nexport default function App() {\n  const location = useLocation()\n  const transitions = useTransition(location, location => location.pathname, {\n    \n    from: { opacity: 0, transform: 'translate3d(100%,0,0)'},\n    enter: { opacity: 1, transform: 'translate3d(0%,0,0)' },\n    leave: { opacity: 1, transform: 'translate3d(150%,0,0)'},\n    \n  })\n  \n  return (\n    \n    <div className=\"app-align\">\n   <Nav />\n  <div className=\"content\">\n  {transitions.map(({ item: location, props, key }) => (\n    <animated.div key={key} style={props} className=\"animated-div\">\n      <Switch location={location}>\n        <Route exact path=\"/\"  component={About} />\n          <Route exact path=\"/about\" component={About} />\n          <Route exact path=\"/projects\" component={Projects} />\n          <Route exact path=\"/experience\" component={Experience} />\n      </Switch>\n    </animated.div>\n    \n  ))}\n    </div>\n    </div>\n\n  )\n}\n\n  \n\n\n\n\n\n  \n  const Home = () => (\n    <div>\n      <h1> Home Page</h1>\n    </div>\n  )\n\n\n\n\n"],"sourceRoot":""}